## Получаем статистику по заболвеваймости 

setwd("~/Desktop/ДЗ. г. Москва/Статистика/COVID-19")

## Получаем данные по миру 
library(coronavirus)
data(coronavirus)
#### пакеты 
library(httr)
library(jsonlite)
library(xml2)
library(rvest)
library(tidyr)
library(tibble)
library(dplyr)
library(ggplot2)
library(XML)
library(forcats)
library(tidytext)
library(eurostat)
library(readxl)
library(plotly)
library(readr)

#Russia
### Загружаем статистику из других источников 

# https://coronadatascraper.com/#home репазиторий данных 
timeseries_tidy <- read_csv("Desktop/ДЗ. г. Москва/Статистика/COVID-19/timeseries-tidy.csv")
View(timeseries_tidy)

covid19 <- read_csv("Desktop/ДЗ. г. Москва/Статистика/COVID-19/03-27-2020.csv")

remotes::install_github("joachim-gassen/tidycovid19")
remotes::install_github("joachim-gassen/tidycovid19",
                        force = TRUE, upgrade = "never")
library(tidycovid19)



timeseries_tidy %>% 
  filter(country == "RUS" & date > "2020-03-01") %>% 
  ggplot(.,aes(date, value, color = type))+
  geom_line()+
  geom_point()+
  geom_text(aes(label = value), nudge_y = 0.5, nudge_x = 0.5)

covid19 %>% 
  filter(Country_Region == "Russia")%>%View()
 group_by(Country_Region) %>% 
  count(Country_Region)
  
 coronavirus_dataset <- read_csv("Desktop/ДЗ. г. Москва/Статистика/COVID-19/coronavirus_dataset.csv")

 coronavirus_dataset %>% 
   filter(Country.Region == "Russia")%>%
 count(Country.Region)
 
### Заблолеваймость, выздоровления, смерти в РФ в общем из пакета coronovirus-----
coronavirus %>% 
  filter(Country.Region == "Russia")%>%
  #filter(date > "2020-02-29") %>% 
  dplyr::group_by(Country.Region, type, cases, date) %>%
  #count(Country.Region) %>% 
  filter(cases != "0")  %>%
  ggplot(., aes(x = date, y = cases, colour = type))+
  geom_line()+
  geom_point()+
  geom_text(aes(label = cases), nudge_y = 0.5, nudge_x = 0.5)+
  labs(title = "Заболеваймость по РФ", x = 'Статус', y = "Кол-во", color  = "")+
  scale_x_date(date_labels  ="%d.%m.%y", date_minor_breaks = "1 day")+
 scale_color_discrete(labels= c("Заболевшие","Умершие", "Выздоровевшие"))+
  theme_bw()+
  geom_point()+
  theme(legend.title = element_blank(), legend.position="bottom", legend.spacing.x = unit(0.5, "lines"), text = element_text( family="Times", color = "gray25"),
        plot.background = element_rect(fill = "gray95"),
        plot.margin = unit(c(1.5, 2.5, 1.5, 2.5), units = "mm"))

tail(coronavirus)


coronavirus %>% 
  dplyr::group_by(Country.Region, type) %>%
  dplyr::summarise(total_cases = sum(cases)) %>%
  tidyr::pivot_wider(names_from = type, values_from = total_cases) %>%
  dplyr::arrange(- confirmed) %>%
  dplyr::filter(confirmed >= 25) %>%
  dplyr::select(Страна = Country.Region, confirmed, death, recovered ) %>%
  dplyr::mutate("Доля умерших" = death / confirmed*100,
                "Доля выздоровевших" = recovered/confirmed*100)%>%
  dplyr::  rename(.,Заболевшие = confirmed, Выздоровевшие = recovered,  Умершие= death)



### Агрегирум данные по странам 
coronavirus %>% 
  filter(Country.Region == "Russia")%>%
  #filter(date > "2020-02-29") %>% 
  dplyr::group_by(Country.Region, type) %>%
  #count(Country.Region) %>% 
  filter(cases != "0") %>% 
  summarise(total_cases = sum(cases)) %>% View()

############ ----------------------СНГ------------
conservation_status <- as_labeller(c(`death` = "Умершие",`confirmed`=  "Заболевшие", `recovered`= "Выздоровевшие" )) 
coronavirus %>% 
  filter(Country.Region %in% c("Russia", "Belarus", "Azerbaijan", "Armenia",
                             "Kazakhstan", "Georgia", "Ukraine", "Uzbekistan"))%>%
   filter(cases != "0")%>%  
  dplyr::group_by(Country.Region, type) %>%
  summarise(total_cases = sum(cases)) %>% 
 ungroup() %>% 
  #arrange(Country.Region, desc(total_cases)) %>% 
  #mutate(Country.Region = as.factor(Country.Region)) %>% 
  mutate(., Country.Region =  fct_reorder(Country.Region,  total_cases))%>% 
  #ggplot(.,aes(Country.Region, total_cases, fill = type))+
  ggplot(.,aes(reorder(Country.Region, total_cases), total_cases, fill = type))+
  geom_col()+
  coord_flip()+
  scale_x_reordered()+
  scale_fill_manual(labels= c("Заболевшие","Умершие", "Выздоровевшие"), values = c("recovered" ="blue", "death"= "black", "confirmed" ="red"))+
  facet_wrap(~type, scales = "free_x", labeller = conservation_status)+
  labs(title = "Заболеваемость по СНГ", x = 'Страны', y = "Количество", fill  = "")+
  theme_bw()+
  theme(legend.title = element_blank(), legend.position="bottom", legend.spacing.x = unit(0.5, "lines"), text = element_text( family="Times", color = "gray25"),
        plot.background = element_rect(fill = "gray95"),
        plot.margin = unit(c(1.5, 2.5, 1.5, 2.5), units = "mm"))
 

################ --------------Таблица мировая статистика со смертностью-------
df_summary <- coronavirus %>% 
  # dplyr::filter(Country.Region != "Others") %>%
  dplyr::group_by(Country.Region, type) %>%
  dplyr::summarise(total_cases = sum(cases)) %>%
  tidyr::pivot_wider(names_from = type, values_from = total_cases) %>%
  dplyr::arrange(- confirmed) %>%
  dplyr::filter(confirmed >= 25) %>%
  dplyr::select(country = Country.Region, confirmed, death) %>%
  dplyr::mutate(death_rate = death / confirmed*100) %>% 
  ungroup()%>% 
  dplyr::mutate(country = factor(country, levels = country))
  mutate(country = fct_reorder(country, confirmed)) #%>% 
top_n(.,10)

ggplot(df_summary, aes(country , confirmed ))+
  geom_col()+
  coord_flip()+
  labs(title = "Заболеваемость COVID - 19  по Миру", x = 'Страны', y = "")+
  theme_bw()+
  theme(legend.title = element_blank(), legend.position="bottom", legend.spacing.x = unit(0.5, "lines"), text = element_text( family="Times", color = "gray25"),
        plot.background = element_rect(fill = "gray95"),
        plot.margin = unit(c(1.5, 2.5, 1.5, 2.5), units = "mm"))




library(plotly)
active_color <- "#1f77b4"
death_color <- "black"
plotly::plot_ly(data = df_summary[1:30, ], 
                x = ~ country, 
                y = ~ confirmed, 
                # text =  ~ confirmed, 
                # textposition = 'auto',
                type = "bar", 
                name = "Заболевшие",
                marker = list(color = active_color)) %>%
  # plotly::add_trace(y = ~ recovered, 
  #                   # text =  ~ recovered, 
  #                   # textposition = 'auto',
  #                   name = "Recovered",
  #                   marker = list(color = recovered_color)) %>%
  plotly::add_trace(y = ~ death, 
                    # text =  ~ death, 
                    # textposition = 'auto',
                    name = "Смерти",
                    marker = list(color = death_color)) %>%
  plotly::layout(barmode = 'stack',
                 yaxis = list(title = "Все наблюдения (Log шкала)",
                              type = "log"),
                 xaxis = list(title = ""),
                 hovermode = "compare",
                 margin =  list(
                   # l = 60,
                   # r = 40,
                   b = 10,
                   t = 10,
                   pad = 2
                 ))



################## -----------Парсим данные с Яндекса по РФ----------------

url <-  "https://yandex.ru/web-maps/covid19?ll=84.019130%2C10.382927&z=2"

r <-  GET("https://yandex.ru/web-maps/covid19?ll=86.329541%2C54.862454&z=3")  

wrate <-  read_html(url)

t <- html_nodes(wrate, ".covid-panel-view__item-cases")%>%
  html_text(class) ### получаем вектор c количеством на текущие сутки

t2 <- html_nodes(wrate, ".covid-panel-view__item-name")%>%
  html_text(class) ### получаем вектор с регионами


## Объеденяем в таблицу 

datarf <- data.frame(t2,t)

colnames(datarf) <- c("Регион", "Численность")

datarf <- datarf %>% 
pivot_wider(names_from = Регион, values_from = Численность) %>% ## Длинный формат
 add_column(., "Дата" = Sys.time()) %>%  # Дата на момент загрузки
 select(., "Дата", everything()) #%>% # Перемещаем столбец с датой в начало 
 #pivot_longer(cols = -Дата, names_to = "Регион", values_to = "Численность")

datarf2 <- merge(datarf1, datarf, all=TRUE) ## добавляем данные в таблицу

datarf1 <- datarf


########### ----------------По РФ с Вики------------



rf_url <- "https://ru.wikipedia.org/wiki/%D0%A0%D0%B0%D1%81%D0%BF%D1%80%D0%BE%D1%81%D1%82%D1%80%D0%B0%D0%BD%D0%B5%D0%BD%D0%B8%D0%B5_COVID-19_%D0%B2_%D0%A0%D0%BE%D1%81%D1%81%D0%B8%D0%B8#%D0%A1%D1%82%D0%B0%D1%82%D0%B8%D1%81%D1%82%D0%B8%D0%BA%D0%B0_%D0%B7%D0%B0%D0%B1%D0%BE%D0%BB%D0%B5%D0%B2%D0%B0%D0%B5%D0%BC%D0%BE%D1%81%D1%82%D0%B8"

rf_raw <- rf_url%>%
  xml2:: read_html()%>%
  html_nodes("table") %>% 
  #rvest :: html_node (xpath = '// * [@ id = "mw-content-text"] / div / table [3]')#%>%htmltab()
  rvest :: html_table (fill = TRUE,
                       header = TRUE) #%>% View()

rf_raw[[3]]%>% View() ### 
rf_raw[[4]]%>% View()
rf_raw[[6]]%>% View()

rf_raw[[8]]%>% View() 
names(rf_raw[[13]])
names(rf_raw[[14]])

########### --- Собираем данные с ежедневных таблиц википедии  собрал за 27 и 28 
# X rf_raw[[8]]
# y rf_raw[[9]]

b30 <-  tab_rff(rf_raw[[13]], rf_raw[[14]], "04.04.2020") %>% View()



### функция автоматически высчитывает число заболевших за сутки 
tab_rff <- function(x, y, z) {
  name_t1 <- c("Регион", "Выявленые", "Умершие", "Выздоровевшие", "Болеющие")
  
  rf_5 <-  as.data.frame(x) 
  colnames(rf_5) <- name_t1
  
  rf_5 <-  rf_5 %>% 
    slice(., -1) %>%
    purrr::modify_at(-1, as.numeric) %>%  # Превращаем занчение в числовые
    mutate_if(is.numeric, ~replace_na(., 0))
  
  rf_5_v<-  rf_5 %>% 
    select(Регион, Выявленые) %>% 
    pivot_wider(names_from = Регион, values_from = Выявленые) 
  
  rf_6 <-  as.data.frame(y) 
  colnames(rf_6) <- name_t1
               
  
  rf_6 <-  rf_6 %>% 
    slice(.,-1) %>% 
    purrr::modify_at(-1, as.numeric) %>%  # Превращаем занчение в числовые
    mutate_if(is.numeric, ~replace_na(., 0)) 
  
  
  rf_6_v <- rf_6 %>% 
    select(Регион, Выявленые) %>% 
    pivot_wider(names_from = Регион, values_from =Выявленые) 
  
  b <- merge(rf_5_v, rf_6_v, all=TRUE) %>% 
    #select(-Дата) %>% 
    mutate_if(is.numeric , replace_na, replace = 0) 
  b  <-  rbind(b,b[2,] - b[1,]) %>% 
  select(., -"Всего") %>% 
    slice(.,3)  ## Заболевшие за 27
  
  b$Дата <- z
  b <-  b %>% 
    pivot_longer(-Дата, names_to = "Регион", values_to = "Заболевшие") 
  b <- b %>% 
    mutate(Дата = lubridate::dmy(Дата))
  print(b)
}

## Добовляем даные за текушие сутки
covid_rf <- rbind(covid_rf, b30) 
tail(covid_rf ) 


name_t1 <- c("Регион", "Выявленые", "Умершие", "Выздоровевшие", "Болеющие")
names(rf_raw[[10]])
names(rf_raw[[9]])


#### Добовляем общие количество заболевших
rf_4 <- rbind(rf_4, data.frame(Дата = "2020-04-09", Выявленые = 1459, Выздоровевшие = 118, Умершие = 13))    
tail(rf_4)



######  -------Парсим страницу "стопкоронавирус.рф"-----
crf_url <- "https://xn--80aesfpebagmfblc0a.xn--p1ai/#"

crf_raw <- crf_url%>%
  xml2:: read_html()%>%
  html_nodes("table") %>% 
  #rvest :: html_node (xpath = '// * [@ id = "mw-content-text"] / div / table [3]')#%>%htmltab()
  rvest :: html_table (fill = TRUE,
                       header = FALSE) #%>% View()

names(rf_raw[[10]])
t <- as.data.frame(crf_raw) 
names_tab1 <-c("Регион", "Заболевших", "Выздоровевших", "Умерло")
colnames(t) <- names_tab1

t <- t %>% 
   slice(., -1) %>%
   purrr::modify_at(-1, as.numeric) %>%  # Превращаем занчение в числовые
   mutate_if(is.numeric, ~replace_na(., 0)) %>% 
   select(., -5) %>% 
   pivot_longer(-Регион, names_to = "события", values_to = "значения")

m# 31

names_tab <-c("Регион", "Заболевших", "Выздоровевших", "Умерло")
t <- crf_raw[[1]]
colnames(t) <- names_tab 
m <- t
 t <- as_tibble(t) %>% 
  pivot_longer(-Регион, names_to = "события", values_to = "значения")%>% 
add_column(Дата = "06.04.2020")

as_tibble(t) %>% 
  pivot_longer(-Регион, names_to = "события", values_to = "значения")%>% 
  add_column(Дата = "05.04.2020")

data_rf1 <-  as_tibble(t) %>% 
  pivot_longer(-Регион, names_to = "события", values_to = "значения")# %>% 
add_column(Дата = "01.04.2020")

data_rf2 <- as_tibble(t) %>% 
  pivot_longer(-Регион, names_to = "события", values_to = "значения")# %>% 
  add_column(Дата = "02.04.2020")
 
data_rf3 <- full_join(t, m, by = c("Регион","события"), name = NULL) %>% 
  mutate_if(is.numeric, ~replace_na(., 0)) %>% 
  mutate("значения" = (значения.x - значения.y)) %>% 
  add_column(Дата = "06.04.2020") %>%
  select(Регион, события, значения, Дата) 

data_rf <- rbind(data_rf, data_rf3) 
tail(data_rf)

write.csv(data_rf, "~/Desktop/ДЗ. г. Москва/Статистика/COVID-19/data_rf.csv",
          row.names = FALSE)
data_rf <- read_csv("data_rf.csv")


t1 <-  data_rf %>% 
  filter(Дата == "31.03.2020") %>% 
  select(., - Дата)

data_rf %>% 
  #filter(Дата <"30.03.2020") %>% 
  group_by(Регион, события, Дата) %>% 
  dplyr::summarise(все_значения = sum(значения)) %>%
  tidyr::pivot_wider(names_from = события, values_from = все_значения) %>%
  dplyr::arrange(- Заболевших) %>%
  #dplyr::filter(confirmed >= 25) %>%
  dplyr::select(Регион, Заболевших, Умерло, Выздоровевших) %>%
  dplyr::mutate("Доля выздоровевших" = Выздоровевших/Заболевших*100,
                "Доля умерших" = Умерло/Заболевших*100)%>%View()
 # dplyr::  rename(.,Заболевшие = confirmed, Выздоровевшие = recovered,  Умершие= death), caption = "Заболеваемость по странам", digits = 2

data_rf %>% 
  filter(Регион == "Москва") %>% 
  ggplot(., aes(Дата, значения, fill = события))+
  geom_col()+
  geom_label(aes(label = значения ))+
  facet_wrap(~события)

## На 02.
data_rf2 %>% 
  pivot_wider(names_from = события, values_from = значения) %>% 
  dplyr::mutate("Доля выздоровевших" = Выздоровевших/Заболевших*100,
                "Доля умерших" = Умерло/Заболевших*100) %>% View()

data_rf %>% 
  filter(Регион =="Москва") %>% 
  group_by(Регион, события, Дата) %>% 
  ggplot(., aes(Дата, значения, fill = события))+
  geom_col()+
  geom_label(aes(label = значения), size = 5, nudge_y = 20)+
  facet_grid(~ события)

##################--------Парсин из большой таблице Википедии -------
rf_raw <- as.data.frame(rf_raw[[6]])
rf_raw %>% View()

names(rf_raw)
head (rf_raw)
rf_raw[1,]%>% View()


#as.vector(names(rf_raw))%>% View()

rf_region_mapping <-  data.frame(rf_raw[1,])%>% 
  pivot_longer(-Дата, names_to = "Регион") 

rf_region_mapping$Регион <-   gsub("\\.", " ", rf_region_mapping$Регион)

rf_region_mapping <- rf_region_mapping %>%   
  separate(Регион, c("Округ", "№"), sep = " ") %>% 
  select(.,4) %>% 
  slice(.,-c(9:16))

rf_names <-  c("Дата", rf_region_mapping$value, "Новых случаев", "Всего случаем",
               "Новых выздоровевших", "Всего выздоровевших", "Новых смертей", "Всего смертей" , "Тестирование", "Источник")
 

rf1 <- rf_raw[, which(!is.na(names(rf_raw)))] %>% 
  stats::setNames(rf_names) %>% 
  dplyr::select(Дата, dplyr::everything()) %>% 
  slice(.,-1)%>%
  dplyr::mutate(Дата = lubridate::dmy(Дата)) %>% 
  dplyr::filter(!is.na(Дата)) %>%
  select(- Источник)

rf1$Тестирование <-   gsub("\\,", ".", rf1$Тестирование)

rf1 %>% dplyr::select(Дата) ## смотрим на даты 

########## Функция для создания правильных дат
# itemizeDates <- function(startDate="12-30-11", endDate="1-4-12", 
#                          format="%d-%m-%y") {
#   out <- seq(as.Date(startDate, format=format), 
#              as.Date(endDate, format=format), by="days")  
#   format(out, format)
# }

### создаем тикушие даты
# rf_date <-itemizeDates(startDate="31-01-20", endDate="24-03-20", 
#              format="%d-%m-%y")


# rf1 <- rf1 %>% 
#   select(.,-1) ## Удаляем строку с повторами имен
# rf1 <-  sapply(rf1[,-1], function(x) as.numeric(x)) ## делаем занчения числовыми
# 
# rf_2 <- cbind(rf_date, rf1)
# rf_2 <- as.tibble(rf_2) %>% 
#   dplyr::mutate(Дата = lubridate::dmy(rf_date)) %>% 
#   select(.,-1)
rf_2 <- as.tibble(rf1) 
### Убираем общую статистику переводим в длиный формат
rf_3 <- rf_2 %>% 
  select(.,1:76) %>% 
  pivot_longer(cols = c(-Дата) , names_to = "Регион", values_to = "Заболевшие") %>% 
  mutate(Заболевшие = as.numeric(Заболевшие)) %>% 
  mutate(Заболевшие = ifelse(is.na(Заболевшие), 0, Заболевшие))

tail(rf_3)

rf_4 <-  rf_2 %>% 
  select(.,c(1, 77:83)) %>% 
  purrr::modify_at(-1, as.numeric) %>% View() # Превращаем занчение в числовые
  mutate_if(is.numeric, ~replace_na(., 0)) %>% # Заменяес Na на 0
  View()
tail(rf_4) 
  
covid_rf <- rf_3  %>%
  dplyr::group_by(Дата, Регион) %>%
  dplyr::summarise(Заболевшие = sum(Заболевшие, na.rm = TRUE)) %>% 
  dplyr::ungroup()  
 # rename(., date = Дата, region = Регион, confirmed = Заболевшие)

covid_rf <- merge(covid_rf, b, all=TRUE)
  
  tail(covid_rf) ### Проверяем даты  

##########----------------Сохраняем данные-----------------
  ##  Статистика по регионам РФ
  write.csv(covid_rf, "~/Desktop/ДЗ. г. Москва/Статистика/COVID-19/covid_rf.csv",
            row.names = FALSE)
  
  ##  Статистика заболевшим, выздр., умершим
  write.csv(rf_4, "~/Desktop/ДЗ. г. Москва/Статистика/COVID-19/rf_4.csv",
            row.names = FALSE)
  
  rf_4 <-  read_csv("~/Desktop/ДЗ. г. Москва/Статистика/COVID-19/rf_4.csv")
  tail(rf_4)
  covid_rf    
library(readr)
  
  rf_4 %>% 
    # select(., c(1, 3, 5, 7)) %>% 
     pivot_longer(cols = c(-Дата) , names_to = "Случии") %>% 
    filter(Дата > "2020-03-01") %>% 
    filter(value != "0") %>% 
    ggplot(., aes(Дата, value, color = Случии))+
    geom_line()+
    geom_point()+
    geom_text(aes(label= value), nudge_y  = 50)+
    labs(title = "Заболеваемость по РФ", x = 'Статус', y = "Количество", color  = "")+
    scale_x_date(date_labels  ="%d.%m.%y", date_minor_breaks = "1 day")+
    scale_color_discrete(labels= c("Выздоровевшие","Заболевшие","Умершие"))+
    theme_bw()+
    theme(legend.title = element_blank(), legend.position="bottom", legend.spacing.x = unit(0.5, "lines"), text = element_text( family="Times", color = "gray25"),
          plot.background = element_rect(fill = "gray95"),
          plot.margin = unit(c(1.5, 2.5, 1.5, 2.5), units = "mm"))
  
  
 ## Топ 10 по регионам РФ
  covid_rf %>% 
    filter(Заболевшие!= "0") %>% 
    group_by(Регион) %>% 
    summarise(Заболевшие = sum(Заболевшие)) %>% 
    top_n(10) %>% 
    mutate(.,Регион = fct_reorder(Регион, Заболевшие)) %>% 
    ggplot(.,aes(Регион, Заболевшие)) + 
    geom_col()+
    geom_label(aes(label = Заболевшие), size = 3, nudge_y = 20)+
    coord_flip()+
    labs(title = "Заболеваемость по регионам РФ", 
         subtitle = "10 регионов с наибольшей заболеваемостью",
         x = "",y = "")+
    theme_bw()+
    theme(legend.title = element_blank(), legend.position="bottom", legend.spacing.x = unit(0.5, "lines"), text = element_text( family="Times", color = "gray25"),
          plot.background = element_rect(fill = "gray95"),
          plot.margin = unit(c(1.5, 2.5, 1.5, 2.5), units = "mm"))
    
 
  covid_rf %>% 
    filter(Заболевшие!= "0") %>% 
    filter(Дата >  "2020-03-01") %>% 
    group_by(Дата) %>% 
    summarise(Заболевшие = sum(Заболевшие)) %>% 
    ggplot(.,aes(Дата, Заболевшие))+
    geom_line()+
    geom_point()+
    geom_text(aes(label= Заболевшие), nudge_y  = 6)+
    labs(title = "Заболеваемость по РФ", x = 'Статус', y = "Количество", color  = "")+
    scale_x_date(date_labels  ="%d.%m.%y", date_minor_breaks = "1 day")+
    scale_color_discrete(labels= c("Заболевшие","Умершие", "Выздоровевшие"))+
    theme_bw()+
    theme(legend.title = element_blank(), legend.position="bottom", legend.spacing.x = unit(0.5, "lines"), text = element_text( family="Times", color = "gray25"),
          plot.background = element_rect(fill = "gray95"),
          plot.margin = unit(c(1.5, 2.5, 1.5, 2.5), units = "mm"))
  
  p <- rf_4 %>% 
    select(., c(1, 3, 5, 7)) %>% 
    pivot_longer(cols = c(-Дата) , names_to = "Случии") %>% 
    filter(Дата > "2020-03-01") %>% 
    filter(value != "0") %>% 
    ggplot(., aes(Дата, value, color = Случии))+
    geom_line()+
    geom_point()+
    geom_text(aes(label= value), nudge_y  = 50)+
    labs(title = "Заболеваемость по РФ", x = 'Статус', y = "Количество", color  = "")+
    scale_x_date(date_labels  ="%d.%m.%y", date_minor_breaks = "1 day")+
    scale_color_discrete(labels= c("Выздоровевшие","Заболевшие","Умершие"))+
    theme_bw()
    theme(legend.title = element_blank(), legend.position="bottom", legend.spacing.x = unit(0.5, "lines"), text = element_text( family="Times", color = "gray25"),
          plot.background = element_rect(fill = "gray95"),
          plot.margin = unit(c(1.5, 2.5, 1.5, 2.5), units = "mm"))
             
  ggplotly(p)                         



################################----------EC-------------
##     Статистика по ЕС отбираем данные по Италии https://ec.europa.eu/eurostat/data/database

 region_itali<- read_excel("NUTS2016-NUTS2021.xlsx", 
                                 sheet = "Changes detailed NUTS 2016-2021", 
                                 range = "A979:F1119") ## Данные по кодам регионов ЕС грузим только Италию 
 
 # Отбираем коды регионов 
 
 region_itali <- region_itali %>% 
   filter(!is.na(...5)) %>% 
   select(., 2, 5) %>%
   slice(.,-22) %>% 
   rename(., code = IT...2, region_name = ...5)
 
 
#### Доступность койки в больнице ЕС на 100000
 beds_it <-   eurostat ::: get_eurostat_raw ( "tgs00064" ) 
 beds_it <-  beds_it%>% 
      separate(`unit,facility,geo\\time`, c("unit", "facility", "geo"), ",", 
                              extra = "merge") %>% 
      semi_join(., region_itali, by = c("geo" = "code")) %>% #Получаем данные только по Италии
       select(., -1,-2) %>% 
       left_join(., region_itali, by=c("geo"="code")) %>% 
       pivot_longer(cols = -c(region_name, geo) ,  names_to = "date", 
                    values_to = "beds") 
 
 beds_it$date <-   strptime(beds_it$date, format = "%Y")
 
 beds_it %>% 
   ggplot(.,aes(date, as.numeric(beds), color = region_name))+
   #geom_point()+
   geom_line()+
   theme(legend.title = element_blank(), legend.position="bottom")

#### Доступность врачей в больнице ЕС на 100000
doc_it <-  eurostat ::: get_eurostat_raw ( "tgs00062" ) %>% view() 
 
doc_it <- doc_it %>% separate(`unit,isco08,geo\\time`, c("unit", "facility", "geo"), ",", 
         extra = "merge") %>% 
  semi_join(., region_itali, by = c("geo" = "code"))%>% 
  select(., -1,-2) %>% 
  left_join(., region_itali, by=c("geo"="code")) %>% 
  pivot_longer(cols = -c(region_name, geo) ,  names_to = "date", 
               values_to = "doc") %>% separate(doc, c('doc', "0") ,  " ", 
                                               extra = "merge") %>% 
  select(., -5)

doc_it %>% 
  ggplot(.,aes(date, as.numeric(doc), color = region_name  ))+
  geom_point()+
  theme(legend.title = element_blank(), legend.position="bottom")

#### Ожидаемая продолжительность жизни EC 
life_it <-  eurostat ::: get_eurostat_raw ( "tgs00101" ) %>% view()  

life_it  <- life_it %>% separate(`unit,age,sex,geo\\time`, c("unit", "age", "sex", "geo"), ",", 
                     extra = "merge") %>% 
  semi_join(., region_itali, by = c("geo" = "code"))%>% 
  select(., -1) %>% 
  left_join(., region_itali, by=c("geo"="code")) %>% 
  pivot_longer(cols = -c(region_name, geo, sex , age) ,  names_to = "date", 
               values_to = "life")


life_it %>% 
  filter(sex == "T") %>% 
  ggplot(.,aes(date, as.numeric(life), color = region_name ))+
  geom_point()+
  theme(legend.title = element_blank(), legend.position="bottom")

  
 #### Доля населения старше 65 лет в ЕС 
 eurostat ::: get_eurostat_raw ( "tps00028" ) %>% view()  

 
 strptime(beds_it$date, format = "%Y")
 

 # ---------------- Италия ----------------
 #Сводная таблица дел в Италии
 #Использование: https://en.wikipedia.org/wiki/2020_coronavirus_outbreak_in_Italy
 
 url_italy <- "https://en.wikipedia.org/wiki/Template:2019%E2%80%9320_coronavirus_pandemic_data/Italy_medical_cases"
 #
 italy_raw <- url_italy%>%
     xml2 :: read_html ()%>%
   html_nodes("table") %>%
    # rvest :: html_node (xpath = '// * [@ id = "mw-content-text"] / div / table [4]')%>%
    rvest :: html_table (fill = TRUE,
                       header = TRUE)

 
 names (italy_raw)
 
  # Просмотр (italy_raw)
  head (italy_raw)
 
  italy_region_mapping <- data.frame(area = c("North-West", "North-West", "North-West", "North-West",
                                                "North-East", "North-East", "North-East", "North-East",
                                              "North-East",
                                              "Center", "Center", "Center", "Center",
                                                 "South","South", "South", "South", "South", "South",
                                                 "Islands", "Islands"),
                                      sub_region = c("ABR", "BAS",	"BZ", "CAL","CAM" ,"EMR" , "FVG", "LAZ", "LIG", "LOM",	"MAR", "MOL", "PIE",	"PUG", "SAR", "SIC","TOS", "TN",	"UMB",	"VDA", "VEN"),
                                     region =  c("Abruzzo", "Basilicata" ,"P.A. Bolzano", "Calabria","Campania", "Emilia Romagna", "Friuli Venezia Giulia","Lazio" , "Liguria", "Lombardia","Marche", "Molise", "Piemonte", "Puglia", "Sardegna", "Sicilia", "Toscana", "P.A. Trento", "Umbria",  "Valle d'Aosta","Veneto"   ) ) 
                                     
  
  italy_names <- c("Date","VDA",	"LIG", 	"PIE",	"LOM",	"VEN",	"TN",	"BZ",
                   "FVG",	"EMR",	"MAR",	"TOS",	"UMB",	"LAZ", "ABR",	"MOL",
                   "CAM",	"BAS",	"PUG",	"CAL",	"SIC",	"SAR",
                   "confirmed_new", "confirmed_total", "death_new", "death_total", "active_ICU", "active_total",
                    "recovery_total", "tested_total",
                   "refs", "notes")  
  
  
  
  italy1 <- italy_raw[, which(!is.na(names(italy_raw)))] %>%
       stats::setNames(italy_names) %>% 
       dplyr::mutate(date = lubridate::ymd(Date)) %>% 
       dplyr::filter(!is.na(date)) %>% 
       dplyr::select(date, dplyr::everything()) %>%
       dplyr::select(-refs, -Date, - notes)
 
 
 
  italy2 <- italy1 %>% dplyr::select(date)
  # # Removing brackets
  for(i in 2:ncol(italy1)){
    x <- ifelse(grepl(")", x = italy1[,i]),strsplit(italy1[, i], split = ")") %>%
                   purrr::map_chr(~.x[2]), italy1[, i] )
     x <- ifelse(grepl("\\[", x = x),strsplit(x, split = "\\[") %>%
                   purrr::map_chr(~.x[1]), x )
    x <- ifelse(grepl(",", x = x), gsub(pattern = ",", replacement = "", x), x)
     x <- gsub(pattern = ",", replacement = "", x)
     italy2[[names(italy1)[i]]] <- as.numeric(x)
   }
 
  totals_italy <- c("confirmed_new", "confirmed_total", "death_new", "death_total", "active_ICU", "active_total",
                    "recovery_total", "tested_total")
                    head(italy2)
 #
 #
italy3 <- italy2 %>%
  tidyr::pivot_longer(cols = c(-date), names_to = "sub_region") %>%
  dplyr::mutate(cases = as.numeric(value)) %>%
  dplyr::mutate(cases = ifelse(is.na(cases), 0, cases))
  head(italy3)
#
   italy4 <- italy3 %>% dplyr::filter(sub_region %in% totals_italy) %>%
    dplyr::group_by(date, sub_region) %>%
    dplyr::summarise(total = max(cases, na.rm = TRUE)) %>%
    dplyr::ungroup()
    head(italy4)
    View(italy4)
 #
covid_italy1 <- italy3 %>%
    dplyr::filter(!sub_region %in% totals_italy) %>%
    dplyr::group_by(date, sub_region) %>%
    dplyr::summarise(total = sum(cases, na.rm = TRUE)) %>%
    dplyr::ungroup() %>%
    dplyr::left_join(italy_region_mapping,  by = "sub_region") %>%
    dplyr::select(date, region, sub_region, total, area ) %>%
    as.data.frame()
  
str(covid_italy1)
# View(covid_italy)

## Сохраняем данные 
##  Статистика по регионам Италии
write.csv(covid_italy1, "~/Desktop/ДЗ. г. Москва/Статистика/COVID-19/covid_italy1.csv", row.names = FALSE)
## Общая статистика по Италии 
write.csv(italy4, "~/Desktop/ДЗ. г. Москва/Статистика/COVID-19/italy4.csv", row.names = FALSE) 
## Общая статистика по всему Италии 
write.csv(italy2, "~/Desktop/ДЗ. г. Москва/Статистика/COVID-19/italy2.csv", row.names = FALSE) 

#Чистим память после сохранения результатов
#rm(url_italy,  italy_raw, italy_region_mapping, italy_names, italy1,  italy2, italy3)


covid_italy1 %>% 
  #filter(region_name != "Lombardia")%>%
  filter(date > "2020-02-29") %>% 
  dplyr::group_by(region, date) %>%
  filter(total  != "0") %>% 
  summarise(total = sum(total)) %>% 
  ggplot(., aes(x = date, y = total, color = region))+
  geom_point()+
  geom_line()+
  geom_text(aes(label = total), nudge_y = 0.5, nudge_x = 0.5)+
  labs(title = "Заболеваймость по регионам Италии", x = 'Статус', y = "Кол-во")+
  scale_x_date(date_labels  ="%d.%m.%y", date_minor_breaks = "1 day")+
  theme_bw()+
  theme(legend.title = element_blank(), legend.position="bottom", legend.spacing.x = unit(0.5, "lines"), text = element_text( family="Times", color = "gray25"),
        plot.background = element_rect(fill = "gray95"),
        plot.margin = unit(c(1.5, 2.5, 1.5, 2.5), units = "mm"))


##################### Italy Первая итерация обработкии до 16.03.2020 с ошибкамии----

# covid_italy %>% 
#   #filter(region_name == "Lombardia")%>%
#   #filter(date > "2020-02-29") %>% 
#   dplyr::group_by(egion_name, date) %>%
#   filter(total_cases  != "0") %>% 
#   summarise(total = sum(total_cases)) %>% 
#   ggplot(., aes(x = date, y = total, color = region_name))+
#   geom_point()+
#   geom_line()+
#   geom_text(aes(label = total), nudge_y = 0.5, nudge_x = 0.5)+
#   labs(title = "Заболеваймость по регионам Италии", x = 'Статус', y = "Кол-во")+
#   scale_x_date(date_labels  ="%d.%m.%y", date_minor_breaks = "1 day")+
#   theme_bw()+
#   theme(legend.title = element_blank(), legend.position="bottom", legend.spacing.x = unit(0.5, "lines"), text = element_text( family="Times", color = "gray25"),
#         plot.background = element_rect(fill = "gray95"),
#         plot.margin = unit(c(1.5, 2.5, 1.5, 2.5), units = "mm"))



### Готовим данные по населению Италии
wiki_url <-  "https://www.tuttitalia.it/regioni/"
# XPath, который мы вручную взяли из исходного кода HTML-страницы
wiki_xpath <- '//*[@id="df"]/div/table[1]'

wiki_table <- wiki_url%>% read_html() %>% html_node(xpath = wiki_xpath) %>% html_table()
str(wiki_table)

# Оставляем нужные колонки
wiki_table <- wiki_table[,c(2,3,4,5)]
wiki_table <- wiki_table %>% slice(1:20)
wiki_table <- as.tibble(wiki_table )
wiki_table$Popolazioneresidenti <- as.numeric(gsub("\\.", "", wiki_table$Popolazioneresidenti))
wiki_table$`Superficiekm²` <- gsub("\\.", "", wiki_table$`Superficiekm²`)
wiki_table$Regione <- gsub("\\-", " ", wiki_table$Regione)
wiki_table$Regione <-  as.factor(wiki_table$Regione)

# Записывыем спарсеные данные в csv
write.csv(wiki_table, "~/Desktop/ДЗ. г. Москва/Статистика/COVID-19/wiki_table.csv", row.names = FALSE) 

#unique(covid_italy1$region)
#unique(wiki_table$Regione)

#as.tibble(wiki_table)
#as.tibble(covid_italy1)

#anti_join(covid_italy1, wiki_table,  by=c("region"="Regione")) 

### Получаем количество заболевших на 100000 региона
reg_tr <- covid_italy1 %>% # Объединяем данные по Trento и Bolzano в регион Trentino-Alto Adige
  dplyr::group_by( region) %>%
  filter(total != "0") %>% 
  summarise(total = sum(total)) %>% 
  slice(., 12, 13) %>% 
  pivot_wider(names_from = region, values_from  = total) %>% 
  summarise(total = sum(`P.A. Bolzano`, `P.A. Trento`)) %>% 
  rename(., `Trentino Alto Adige` = total) %>% 
  pivot_longer(cols =`Trentino Alto Adige`, names_to = "region") %>% 
  rename(., total = value)


### Данные на 100000 населения
covid_italy1 %>% 
  dplyr::group_by(region) %>%
  filter(total != "0") %>% 
  summarise(total = sum(total)) %>%
  slice(., -12, -13) %>% 
  merge(., reg_tr, all=TRUE) %>% 
  left_join(., wiki_table ,by=c("region" = "Regione")) %>% 
  mutate(totalN =total/Popolazioneresidenti*100000) %>% 
  mutate(.,region_name = fct_reorder(region,totalN)) %>% 
  ggplot(.,aes(region_name, totalN))+
  geom_col()+
  coord_flip()+
  labs(title = "Заболеваемость по регионам Италии", 
       x = "Регионы",y = "Заболевшие 100000 населения")+
  theme_bw()+
  theme(legend.title = element_blank(), legend.position="bottom", legend.spacing.x = unit(0.5, "lines"), text = element_text( family="Times", color = "gray25"),
        plot.background = element_rect(fill = "gray95"),
        plot.margin = unit(c(1.5, 2.5, 1.5, 2.5), units = "mm"))


library(remotes)
remotes::install_github("dgrtwo/cord19")


library(cord19)

cord19_papers %>% View()
# filter( !is.na(publish_time)) %>% 
count()
cord19_paper_citations %>%  
  group_by(year) %>% 
  count()%>% View()


 









