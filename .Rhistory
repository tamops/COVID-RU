layout(barmode = 'stack',
title = "Заболеваемость по регионам РФ",
yaxis = list(title = "", type = "log"),
xaxis = list(title = ""),
hovermode = "compare")
reg_rf3
### График plotly
reg_rf3 %>%
filter(Дата == max(Дата)) %>%
left_join(., nas_rf, c("Регион" = "Субъект")) %>%
transmute(Регион, Заболеваемость = Заболело / Население*100000) %>%
select (Регион,  Заболеваемость) %>%
top_n(10, wt =  Заболеваемость) %>%
mutate(Регион = fct_reorder(Регион, Заболеваемость	)) %>%
plot_ly(x = ~ Регион, y = ~  Заболеваемость) %>%
add_column() %>%
layout(barmode = 'stack',
title = "Заболеваемость по регионам РФ",
yaxis = list(title = "", type = "log"),
xaxis = list(title = ""),
hovermode = "compare")
knitr::kable(reg_rf3%>%
filter(Дата == max(Дата)) %>%
# pivot_wider(names_from = события, values_from = значения) %>%
dplyr::mutate("Доля выздоровевших" = Выздоровевших/Заболело*100,
"Доля умерших" = Умерло/Заболело*100), digits = 2)
knitr::kable(reg_rf3 %>%
filter(Дата == max(Дата)) %>%
left_join(reg_rf3, nas_rf, c("Регион" = "Субъект")) %>%
transmute(Регион, Заболеваемость = Заболело / Население * 100000,
Активных  =   Активных / Население * 100000,
Выздоровевших =  Выздоровевших/Население * 100000,
Умерших = Умерло / Население * 100000) %>%
arrange(desc(Заболеваемость)), digits = 2)
knitr::kable(reg_rf3 %>%
filter(Дата == max(Дата)) %>%
left_join(., nas_rf, c("Регион" = "Субъект")) %>%
transmute(Регион, Заболеваемость = Заболело / Население * 100000,
Активных  =   Активных / Население * 100000,
Выздоровевших =  Выздоровевших/Население * 100000,
Умерших = Умерло / Население * 100000) %>%
arrange(desc(Заболеваемость)), digits = 2)
reg_rf3 %>%
filter(Дата == max(Дата)) %>%
left_join(reg_rf3, nas_rf, c("Регион" = "Субъект")) %>%
transmute(Регион, Заболеваемость = Заболело / Население * 100000,
Активных  =   Активных / Население * 100000,
Выздоровевших =  Выздоровевших/Население * 100000,
Умерших = Умерло / Население * 100000)  %>%
top_n(10, wt = Умерших) %>%
mutate(Регион = fct_reorder(Регион,Умерших )) %>%
plot_ly(x = ~ Регион, y = ~ Умерших, marker = list(color ="black")) %>%
layout(barmode = 'stack',
title = "Смертность на 100000 по регионам РФ",
yaxis = list(title = "", type = "log"),
xaxis = list(title = ""),
hovermode = "compare")
reg_rf3 %>%
filter(Дата == max(Дата)) %>%
left_join(., nas_rf, c("Регион" = "Субъект")) %>%
transmute(Регион, Заболеваемость = Заболело / Население * 100000,
Активных  =   Активных / Население * 100000,
Выздоровевших =  Выздоровевших/Население * 100000,
Умерших = Умерло / Население * 100000)  %>%
top_n(10, wt = Умерших) %>%
mutate(Регион = fct_reorder(Регион,Умерших )) %>%
plot_ly(x = ~ Регион, y = ~ Умерших, marker = list(color ="black")) %>%
layout(barmode = 'stack',
title = "Смертность на 100000 по регионам РФ",
yaxis = list(title = "", type = "log"),
xaxis = list(title = ""),
hovermode = "compare")
install.packages("shinythemes")
library(shinythemes)
#------------------ Packages ------------------
library(flexdashboard)
#checks if there is data update on the Github version
#coronavirus::update_datasets(silence = TRUE)
setwd("~/Desktop/ДЗ. г. Москва/Статистика/COVID-19")
## Получаем данные по миру
library(coronavirus)
#data(coronavirus)
##Локальная загрузка
load(file = "coronavirus.rda")
### Пакеты
library(httr)
library(jsonlite)
library(xml2)
library(rvest)
library(tidyr)
library(tibble)
library(dplyr)
library(ggplot2)
library(XML)
library(forcats)
library(tidytext)
library(knitr)
library(readr)
library(plotly)
library(flexdashboard)
covid_rf <- read_csv("covid_rf.csv")
rf_4 <- read_csv("rf_4.csv")
reg_rf2 <- read_csv("reg_rf2.csv")
nas_rf <- read_csv("nas_rf.csv")
reg_rf3 <- read_csv("reg_rf3.csv")
`%>%` <- magrittr::`%>%`
#------------------ Parameters ------------------
# https://www.w3.org/TR/css-color-3/#svg-color
confirmed_color <- "#283C72"
active_color <- "#C0232C"
recovered_color <- "forestgreen"
death_color <- "black"
####------------------ Data ------------------
df <- coronavirus %>%
dplyr::group_by(country, type) %>%
dplyr::summarise(total = sum(cases)) %>%
tidyr::pivot_wider(names_from =  type,
values_from = total) %>%
dplyr::mutate(unrecovered = confirmed - ifelse(is.na(recovered), 0, recovered) - ifelse(is.na(death), 0, death)) %>%
dplyr::arrange(-confirmed) %>%
dplyr::ungroup() %>%
dplyr::mutate(country = dplyr::if_else(country == "United Arab Emirates", "UAE", country)) %>%
dplyr::mutate(country = dplyr::if_else(country == "Mainland China", "China", country)) %>%
dplyr::mutate(country = dplyr::if_else(country == "North Macedonia", "N.Macedonia", country)) %>%
dplyr::mutate(country = trimws(country)) %>%
dplyr::mutate(country = factor(country, levels = country))
df
valueBox(value = paste(format(sum(df$confirmed), big.mark = ","), "", sep = " "),
caption = "Всего заболевших",
icon = "fas fa-user-md",
color = confirmed_color)
plotly::plot_ly(data = df[1:30, ],
x = ~ country,
y = ~ unrecovered,
#text =  ~ confirmed,
#textposition = 'auto',
type = "bar",
name = "Активные",
marker = list(color = active_color)) %>%
plotly::add_trace(y = ~ recovered,
# text =  ~ recovered,
# textposition = 'auto',
name = "Выздоровевшие",
marker = list(color = recovered_color)) %>%
plotly::add_trace(y = ~ death,
# text =  ~ death,
# textposition = 'auto',
name = "Смерти",
marker = list(color = death_color)) %>%
plotly::layout(barmode = 'stack',
yaxis = list(title = "Все наблюдения (Log шкала)",
type = "log"),
xaxis = list(title = ""),
hovermode = "compare",
margin =  list(
# l = 60,
# r = 40,
b = 10,
t = 10,
pad = 2
))
knitr::kable(coronavirus %>%
dplyr::group_by(country, type) %>%
dplyr::summarise(total_cases = sum(cases)) %>%
tidyr::pivot_wider(names_from = type, values_from = total_cases) %>%
dplyr::arrange(- confirmed) %>%
dplyr::filter(confirmed >= 25) %>%
dplyr::select(Страна = country, confirmed, death, recovered) %>%
dplyr::mutate("Активные" = confirmed - sum(death, recovered),
"Доля выздоровевших" = recovered/confirmed*100,
"Доля умерших" = death / confirmed*100)%>%
dplyr::  rename(.,Заболевшие = confirmed, Выздоровевшие = recovered,  Умершие= death), digits = 2)
max_date <- max(coronavirus$date)
coronavirus %>%
filter(country %in% c("Russia", "Belarus", "Azerbaijan", "Armenia",
"Kazakhstan", "Georgia", "Ukraine", "Uzbekistan"))%>%
filter(cases != "0")%>%
dplyr::group_by(country, type) %>%
dplyr::filter(type == "confirmed", date == max_date) %>%
dplyr::group_by(country) %>%
dplyr::summarise(total_cases = sum(cases)) %>%
dplyr::arrange(-total_cases) %>%
dplyr::mutate(country = factor(country, levels = country)) %>%
dplyr::ungroup() %>%
#dplyr::top_n(n = 15, wt = total_cases) %>%
plotly::plot_ly(x = ~ country,
y = ~ total_cases,
text = ~ total_cases,
textposition = 'auto',
type = "bar") %>%
plotly::layout(yaxis = list(title = "Количество новых случаев за сутки"),
xaxis = list(title = ""),
margin =  list(
l = 10,
r = 10,
b = 10,
t = 10,
pad = 2
))
library(forcats)
coronavirus %>%
filter(country %in% c("Russia", "Belarus", "Azerbaijan", "Armenia",
"Kazakhstan", "Georgia", "Ukraine", "Uzbekistan"))%>%
filter(cases != "0")%>%
dplyr::group_by(country, type) %>%
summarise(total_cases = sum(cases)) %>%
ungroup() %>%
mutate(country  =  fct_reorder(country, total_cases)) %>%
pivot_wider(names_from = type, values_from = total_cases) %>%
plotly::plot_ly(data = .,
x = ~ country,
y = ~ confirmed,
# text =  ~ confirmed,
# textposition = 'auto',
type = "bar",
name = "Заболевшие",
marker = list(color = active_color)) %>%
plotly::add_trace(y = ~ recovered,
# text =  ~ recovered,
# textposition = 'auto',
name = "Выздоровевшие",
marker = list(color = recovered_color)) %>%
plotly::add_trace(y = ~ death,
# text =  ~ death,
# textposition = 'auto',
name = "Смерти",
marker = list(color = death_color)) %>%
plotly::layout(barmode = 'stack',
yaxis = list(title = "Все наблюдения"),
xaxis = list(title = ""),
hovermode = "compare",
margin =  list(
# l = 60,
# r = 40,
b = 10,
t = 10,
pad = 2
))
#------------------ Packages ------------------
library(flexdashboard)
#checks if there is data update on the Github version
#coronavirus::update_datasets(silence = TRUE)
setwd("~/Desktop/ДЗ. г. Москва/Статистика/COVID-19")
## Получаем данные по миру
library(coronavirus)
#data(coronavirus)
##Локальная загрузка
load(file = "coronavirus.rda")
### Пакеты
library(httr)
library(jsonlite)
library(xml2)
library(rvest)
library(tidyr)
library(tibble)
library(dplyr)
library(ggplot2)
library(XML)
library(forcats)
library(tidytext)
library(knitr)
library(readr)
library(plotly)
library(leaflet)
library(glue)
library(flexdashboard)
covid_rf <- read_csv("covid_rf.csv")
rf_4 <- read_csv("rf_4.csv")
reg_rf2 <- read_csv("reg_rf2.csv")
nas_rf <- read_csv("nas_rf.csv")
reg_rf3 <- read_csv("reg_rf3.csv")
regrfgeo <- read_csv("regrfgeo.csv")
`%>%` <- magrittr::`%>%`
#------------------ Parameters ------------------
# https://www.w3.org/TR/css-color-3/#svg-color
confirmed_color <- "#283C72"
active_color <- "#C0232C"
recovered_color <- "forestgreen"
death_color <- "black"
####------------------ Data ------------------
df <- coronavirus %>%
dplyr::group_by(country, type) %>%
dplyr::summarise(total = sum(cases)) %>%
tidyr::pivot_wider(names_from =  type,
values_from = total) %>%
dplyr::mutate(unrecovered = confirmed - ifelse(is.na(recovered), 0, recovered) - ifelse(is.na(death), 0, death)) %>%
dplyr::arrange(-confirmed) %>%
dplyr::ungroup() %>%
dplyr::mutate(country = dplyr::if_else(country == "United Arab Emirates", "UAE", country)) %>%
dplyr::mutate(country = dplyr::if_else(country == "Mainland China", "China", country)) %>%
dplyr::mutate(country = dplyr::if_else(country == "North Macedonia", "N.Macedonia", country)) %>%
dplyr::mutate(country = trimws(country)) %>%
dplyr::mutate(country = factor(country, levels = country))
template <-  "<p> { Регион }</p><p> Новых { Новые }</p><p>Активных { Активных }</p><p> Выздоровевших { Выздоровевших }</p><p>Умерших { Умерло }</p>"
reg_rf3 %>%
filter(Дата == max(Дата)) %>%
left_join(., regrfgeo, by = c("Регион" =  "Субъект")) %>%
mutate(html = glue(template)) %>%
leaflet() %>%
addTiles() %>%
addCircleMarkers(lng = ~Долгота, lat = ~Широта, popup = ~html)
template <-  "<p> { Регион }</p><p><b>Новых</b> { Новые }</p><p><b>Активных</b> { Активных }</p><p><b>Выздоровевших</b> { Выздоровевших }</p><p><b>Умерших</b> { Умерло }</p>"
reg_rf3 %>%
filter(Дата == max(Дата)) %>%
left_join(., regrfgeo, by = c("Регион" =  "Субъект")) %>%
mutate(html = glue(template)) %>%
mutate(trans_zab = log2(Заболело),
pal  = colorNumeric(c("blue", "red"), trans_zab)(trans_zab)) %>%
leaflet() %>%
addTiles() %>%
addCircleMarkers(lng = ~Долгота, lat = ~Широта, popup = ~html, color = ~ pal, radius = ~ log(Умерло))
#------------------ Packages ------------------
library(flexdashboard)
#checks if there is data update on the Github version
#coronavirus::update_datasets(silence = TRUE)
setwd("~/Desktop/ДЗ. г. Москва/Статистика/COVID-19")
## Получаем данные по миру
library(coronavirus)
#data(coronavirus)
##Локальная загрузка
load(file = "coronavirus.rda")
### Пакеты
library(httr)
library(jsonlite)
library(xml2)
library(rvest)
library(tidyr)
library(tibble)
library(dplyr)
library(ggplot2)
library(XML)
library(forcats)
library(tidytext)
library(knitr)
library(readr)
library(plotly)
library(leaflet)
library(glue)
library(flexdashboard)
covid_rf <- read_csv("covid_rf.csv")
rf_4 <- read_csv("rf_4.csv")
reg_rf2 <- read_csv("reg_rf2.csv")
nas_rf <- read_csv("nas_rf.csv")
reg_rf3 <- read_csv("reg_rf3.csv")
regrfgeo <- read_csv("regrfgeo.csv")
`%>%` <- magrittr::`%>%`
#------------------ Parameters ------------------
# https://www.w3.org/TR/css-color-3/#svg-color
confirmed_color <- "#283C72"
active_color <- "#C0232C"
recovered_color <- "forestgreen"
death_color <- "black"
####------------------ Data ------------------
df <- coronavirus %>%
dplyr::group_by(country, type) %>%
dplyr::summarise(total = sum(cases)) %>%
tidyr::pivot_wider(names_from =  type,
values_from = total) %>%
dplyr::mutate(unrecovered = confirmed - ifelse(is.na(recovered), 0, recovered) - ifelse(is.na(death), 0, death)) %>%
dplyr::arrange(-confirmed) %>%
dplyr::ungroup() %>%
dplyr::mutate(country = dplyr::if_else(country == "United Arab Emirates", "UAE", country)) %>%
dplyr::mutate(country = dplyr::if_else(country == "Mainland China", "China", country)) %>%
dplyr::mutate(country = dplyr::if_else(country == "North Macedonia", "N.Macedonia", country)) %>%
dplyr::mutate(country = trimws(country)) %>%
dplyr::mutate(country = factor(country, levels = country))
# rf_4_1 <- rf_4 %>%
#      filter( Дата >	"2020-03-15") %>%
#     # select(., c(1, 3, 5, 7)) %>%
#      pivot_longer(cols = c(-Дата) , names_to = "Случии") %>%
#    # filter(Дата > "2020-03-01") %>%
#     #filter(value != "0") %>%
#     pivot_wider(names_from = Случии, values_from = value)
#
#
#
# ###########
# plotly::plot_ly(data = rf_4_1) %>%
#   plotly::add_trace(x = ~ Дата,
#                     y = ~ Выявленые,
#                     type = "scatter",
#                     mode = "lines+markers",
#                     name = "Активные",
#                     line = list(color = active_color),
#                     marker = list(color = active_color)) %>%
#   plotly::add_trace(x = ~ Дата,
#                     y = ~ Выздоровевшие,
#                     type = "scatter",
#                     mode = "lines+markers",
#                     name = "Выздоровевшие",
#                     line = list(color = recovered_color),
#                     marker = list(color = recovered_color)) %>%
#   plotly::add_trace(x = ~ Дата,
#                     y = ~ Умершие,
#                     type = "scatter",
#                     mode = 'lines+markers',
#                     name = "Умершие",
#                     line = list(color = death_color),
#                     marker = list(color = death_color)) %>%
#   plotly::layout(title = "",
#                  yaxis = list(title = "Заболеваемость"),
#                  xaxis = list(title = "Дата"),
#                  legend = list(x = 0.1, y = 0.9),
#                  hovermode = "compare")
rf_4 %>%
filter(Дата > "2020-04-19") %>%
mutate(Выявленые = as.numeric(Выявленые),
Выздоровевшие = as.numeric(Выздоровевшие),
Умершие = as.numeric(Умершие)) %>%
plotly::plot_ly(data = .) %>%
plotly::add_trace(x = ~ Дата,
y = ~ Умершие,
type = "bar",
name = "Умершие",
marker = list(color = "#4d6263")) %>%
plotly::add_trace(x = ~ Дата,
y = ~ Выздоровевшие,
type = "scatter",
mode = "lines+markers",
name = "выздоровило",
line = list(color = "green"),
marker = list(color = "ultramarine")) %>%
plotly::add_trace(x = ~ Дата,
y = ~ Выявленые,
type = "scatter",
mode = "lines+markers",
name = "Выявленые",
line = list(color = "active_color"),
marker = list(color = "active_color")) %>%
plotly::layout(yaxis = list(title = "Количество новых случаев за сутки",
type = "log"),
xaxis = list(title = ""),
margin =  list(
l = 10,
r = 10,
b = 10,
t = 10,
pad = 2
))
# rf_4_1 <- rf_4 %>%
#      filter( Дата >	"2020-03-15") %>%
#     # select(., c(1, 3, 5, 7)) %>%
#      pivot_longer(cols = c(-Дата) , names_to = "Случии") %>%
#    # filter(Дата > "2020-03-01") %>%
#     #filter(value != "0") %>%
#     pivot_wider(names_from = Случии, values_from = value)
#
#
#
# ###########
# plotly::plot_ly(data = rf_4_1) %>%
#   plotly::add_trace(x = ~ Дата,
#                     y = ~ Выявленые,
#                     type = "scatter",
#                     mode = "lines+markers",
#                     name = "Активные",
#                     line = list(color = active_color),
#                     marker = list(color = active_color)) %>%
#   plotly::add_trace(x = ~ Дата,
#                     y = ~ Выздоровевшие,
#                     type = "scatter",
#                     mode = "lines+markers",
#                     name = "Выздоровевшие",
#                     line = list(color = recovered_color),
#                     marker = list(color = recovered_color)) %>%
#   plotly::add_trace(x = ~ Дата,
#                     y = ~ Умершие,
#                     type = "scatter",
#                     mode = 'lines+markers',
#                     name = "Умершие",
#                     line = list(color = death_color),
#                     marker = list(color = death_color)) %>%
#   plotly::layout(title = "",
#                  yaxis = list(title = "Заболеваемость"),
#                  xaxis = list(title = "Дата"),
#                  legend = list(x = 0.1, y = 0.9),
#                  hovermode = "compare")
rf_4 %>%
filter(Дата > "2020-03-19") %>%
mutate(Выявленые = as.numeric(Выявленые),
Выздоровевшие = as.numeric(Выздоровевшие),
Умершие = as.numeric(Умершие)) %>%
plotly::plot_ly(data = .) %>%
plotly::add_trace(x = ~ Дата,
y = ~ Умершие,
type = "bar",
name = "Умершие",
marker = list(color = "#4d6263")) %>%
plotly::add_trace(x = ~ Дата,
y = ~ Выздоровевшие,
type = "scatter",
mode = "lines+markers",
name = "выздоровило",
line = list(color = "green"),
marker = list(color = "ultramarine")) %>%
plotly::add_trace(x = ~ Дата,
y = ~ Выявленые,
type = "scatter",
mode = "lines+markers",
name = "Выявленые",
line = list(color = "red"),
marker = list(color = "red")) %>%
plotly::layout(yaxis = list(title = "Количество новых случаев за сутки",
type = "log"),
xaxis = list(title = ""),
margin =  list(
l = 10,
r = 10,
b = 10,
t = 10,
pad = 2
))
